--Example;
local Extension = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/EXFTB/Extensions/main/Roblox.lua"))()
local Functions = Extension.Functions
local Variables = Extension.Variables

--Help
If you need examples on how to use functions such as hookmethods you just have to add an arguement that says true
Functions.Define("Players", game.Players, true) instead of Functions.Define("Players", game.Players)

--All functions (so far) and their arguements:
Functions.Define(Name: string, Definition: any, Example: boolean)
Functions.Alive(Player: player, Example: boolean)
Functions.GetRankInGroup(Player: player, Group: group, Example: boolean)
Functions.Hook(OldFunction: any, NewFunction: any, Example: boolean)
Functions.HookMethod(Table: any, Method: any, NewFunction: any, Example: boolean)
Functions.CreateProxy(Target: any, Example: boolean)
Functions.GarbageCollectionHook(Function: string, NewFunction: any, Example: boolean)
Functions.ClearCache()

--Hook
local Function = require(moduleblablabla).voidcheck --example
Functions.Hook(Function, function()
    return 
end)


--Hookmetamethod with CreateProxy (to avoid C-Stack overflow when using namecallhooks)
local OldCall = nil
OldCall = Functions.HookMethod(game, "__namecall", function(self)
    
    if self:IsA("BasePart") then --Using : would usually cause C-Stack overflow in a namecall hook, therefore you have to do self.IsA(self, "BasePart"). However you can do this another way with the CreateProxy function.
        print("True!")
    end

    local ProxySelf = Functions.CreateProxy(self) --Only creates it one time, and returns it if it's called again.
    if ProxySelf:IsA("BasePart") then --This will not cause C-Stack overflow since proxy self automatically does self.IsA(self, ...) for you!
        print("True!")
    end
    
    return OldCall(self)
end)

--GarbageCollectionHook (something I just put together)
Functions.GarbageCollectionHook("Kick", function() --Will basically catch all functions in the game called "Kick" on the client.
    return wait(9e9) --Will return a wait of 9e9 seconds instead of the actual function, pretty simple but ¯\_(ツ)_/¯
end)
